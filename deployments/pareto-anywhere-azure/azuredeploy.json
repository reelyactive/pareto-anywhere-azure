{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "iotHubName": {
            "type": "string",
            "metadata": {
              "description": "Name of the existing IoT Hub in this Resource Group."
            },
            "defaultValue": "[concat(resourceGroup().name, '-iot-hub')]"
        },
        "eventHubNamespaceName": {
            "type": "string",
            "metadata": {
                "description": "Name of Event Hub Namespace to create."
            },
            "defaultValue": "[concat(resourceGroup().name, '-events')]"
        },
        "eventHubName": {
            "type": "string",
            "metadata": {
                "description": "Name of Event Hub to create."
            },
            "defaultValue": "[concat(resourceGroup().name, '-event-hub')]"
        },
        "webPubSubName": {
            "type": "string",
            "metadata": {
                "description": "Name of Web PubSub to create."
            },
            "defaultValue": "[concat(replace(resourceGroup().name, '-', ''), 'wps')]"
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "Name of Storage Account to create."
            },
            "defaultValue": "[concat(replace(resourceGroup().name, '-', ''), 'storage')]"
        },
        "functionName": {
            "type": "string",
            "metadata": {
                "description": "Name of Function App to create."
            },
            "defaultValue": "[concat(resourceGroup().name, '-pareto-anywhere')]"
        },
        "functionPackageUri": {
            "type": "string",
            "metadata": {
                "description": "URI of function package to deploy (default recommended)."
            },
            "defaultValue": "https://raw.githubusercontent.com/reelyactive/pareto-anywhere-azure/deployments/pareto-anywhere-azure/packages/function-app.zip"
        }
    },
    "variables": {
        "planName": "[concat('pareto-anywhere-pln', uniqueString(resourceGroup().id))]", 
        "iotHubKey": "iothubowner"
    },
    "resources": [
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2023-01-01-preview",
            "name": "[parameters('eventHubNamespaceName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Basic",
                "tier": "Basic",
                "capacity": 1
            },
            "properties": {
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false,
                "zoneRedundant": false,
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            }
        },
        {
            "type": "Microsoft.SignalRService/WebPubSub",
            "apiVersion": "2023-06-01-preview",
            "name": "[parameters('webPubSubName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Free_F1",
                "tier": "Free",
                "size": "F1",
                "capacity": 1
            },
            "kind": "WebPubSub",
            "properties": {
                "tls": {
                    "clientCertEnabled": false
                },
                "networkACLs": {
                    "defaultAction": "Deny",
                    "publicNetwork": {
                        "allow": [
                            "ServerConnection",
                            "ClientConnection",
                            "RESTAPI",
                            "Trace"
                        ]
                    },
                    "privateEndpoints": []
                },
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false,
                "disableAadAuth": false
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2023-01-01",
            "name": "[parameters('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "minimumTlsVersion": "TLS1_0",
                "allowBlobPublicAccess": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2022-09-01",
            "name": "[variables('planName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "EP1",
                "tier": "ElasticPremium",
                "size": "EP1",
                "family": "EP",
                "capacity": 1
            },
            "kind": "elastic",
            "properties": {
                "perSiteScaling": false,
                "elasticScaleEnabled": true,
                "maximumElasticWorkerCount": 1,
                "isSpot": false,
                "reserved": false,
                "isXenon": false,
                "hyperV": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0,
                "zoneRedundant": false
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/authorizationrules",
            "apiVersion": "2023-01-01-preview",
            "name": "[concat(parameters('eventHubNamespaceName'), '/RootManageSharedAccessKey')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
            ],
            "properties": {
                "rights": [
                    "Listen",
                    "Manage",
                    "Send"
                ]
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "apiVersion": "2023-01-01-preview",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
            ],
            "properties": {
                "retentionDescription": {
                    "cleanupPolicy": "Delete",
                    "retentionTimeInHours": 24
                },
                "messageRetentionInDays": 1,
                "partitionCount": 1,
                "status": "Active"
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/networkrulesets",
            "apiVersion": "2023-01-01-preview",
            "name": "[concat(parameters('eventHubNamespaceName'), '/default')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
            ],
            "properties": {
                "publicNetworkAccess": "Enabled",
                "defaultAction": "Allow",
                "virtualNetworkRules": [],
                "ipRules": [],
                "trustedServiceAccessEnabled": false
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "allowPermanentDelete": false,
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "allowPermanentDelete": false,
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2022-09-01",
            "name": "[parameters('functionName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('planName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.SignalRService/WebPubSub', parameters('webPubSubName'))]"
            ],
            "kind": "functionapp,linux",
            "properties": {
                "enabled": true,
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('planName'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "node"
                        },
                        {
                            "name": "WEBSITE_ENABLE_SYNC_UPDATE_SITE",
                            "value": true
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "~18"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2015-05-01-preview').key1)]"
                        },
                        { 
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[parameters('functionName')]" 
                        },
                        {
                            "name": "event_hub_name",
                            "value": "[parameters('eventHubName')]"
                        },
                        {
                            "name": "EventHubSendAppSetting",
                            "value": "[listkeys(resourceId('Microsoft.EventHub/namespaces/authorizationrules', parameters('eventHubNamespaceName'), 'RootManageSharedAccessKey'), '2023-01-01-preview').primaryConnectionString]"
                        },
                        {
                            "name": "iot_hub_name",
                            "value": "[reference(resourceId('Microsoft.Devices/IotHubs', parameters('iotHubName')), '2021-07-02').eventHubEndpoints.events.path]"
                        },
                        {
                            "name": "EventHubConnectionString",
                            "value": "[format('Endpoint={0};SharedAccessKeyName={1};SharedAccessKey={2};EntityPath={3}', reference(resourceId('Microsoft.Devices/IotHubs', parameters('iotHubName')), '2021-07-02').eventHubEndpoints.events.endpoint, variables('iotHubKey'), listkeys(resourceId('Microsoft.Devices/IotHubs', parameters('iotHubName')), '2021-07-02').value[0].primaryKey, reference(resourceId('Microsoft.Devices/IotHubs', parameters('iotHubName')), '2021-07-02').eventHubEndpoints.events.path)]"
                        },
                        {
                            "name": "web_pub_sub_hub_name",
                            "value": "[parameters('webPubSubName')]"
                        },
                        {
                            "name": "WebPubSubConnectionString",
                            "value": "[listkeys(resourceId('Microsoft.SignalRService/WebPubSub', parameters('webPubSubName')), '2023-06-01-preview').primaryConnectionString]"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                            "value": true
                        }
                    ]
                }
            },
            "resources": [
                {
                    "name": "ZipDeploy",
                    "type": "Extensions",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2021-02-01",
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', parameters('functionName'))]"
                    ],
                    "properties": {
                        "packageUri": "[variables('functionPackageUri')]"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationrules",
            "apiVersion": "2023-01-01-preview",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'), '/aruba-hub-rule')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
            ],
            "properties": {
                "rights": [
                    "Listen",
                    "Send"
                ]
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "apiVersion": "2023-01-01-preview",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'), '/$Default')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccountName'), '/default/azure-webjobs-eventhub')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccountName'), '/default/azure-webjobs-hosts')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccountName'), '/default/azure-webjobs-secrets')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "immutableStorageWithVersioning": {
                    "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccountName'), '/default/amd-pareto-handler-function25b6ae8eec1e57')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "accessTier": "TransactionOptimized",
                "shareQuota": 5120,
                "enabledProtocols": "SMB"
            }
        }
    ]
}