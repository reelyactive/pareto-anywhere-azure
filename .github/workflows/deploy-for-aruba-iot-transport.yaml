# This workflow will create a new resource group and all resources to run
# Pareto Anywhere for Azure with source data from Aruba IoT Transport for Azure.

name: Deploy with support for Aruba IoT Transport for Azure

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: 'Resource Group Name'
        required: true
        default: 'pareto-anywhere-azure'
      azure_region:
        description: 'Azure Region'
        required: true
        default: 'canadaeast'

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '16.x'
  HUB_RULE_NAME: 'pareto-anywhere-hub-rule'
  SLOT: 'production'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SUFFIX: $(date +"%Y%m%d")${{ github.run_id }}
    steps:

    # Confirm that CLUSTER_SERVICE_PRINCIPAL exists as a GitHub Action secret
    - name: Confirm that CLUSTER_SERVICE_PRINCIPAL exists as a GitHub Action secret
      run: |
        if [ `echo ${{ secrets.CLUSTER_SERVICE_PRINCIPAL }} | wc -c` -lt 2 ]; then
          echo This Action requires a "CLUSTER_SERVICE_PRINCIPAL" secret;
          exit 1;
        fi

    # Confirm that SUBSCRIPTION_ID exists as a GitHub Action secret
    - name: Confirm that SUBSCRIPTION_ID exists as a GitHub Action secret
      run: |
        if [ `echo ${{ secrets.SUBSCRIPTION_ID }} | wc -c` -lt 2 ]; then
          echo This Action requires a "SUBSCRIPTION_ID" secret;
          exit 1;
        fi

    # Use the master branch
    - uses: actions/checkout@master

    # Login to Azure as CLUSTER_SERVICE_PRINCIPAL (from GitHub Action secrets)
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.CLUSTER_SERVICE_PRINCIPAL }}

    # Install the Azure CLI
    - name: Install azure-cli
      uses: pietrobolcato/install-azure-cli-action@v1.0.1

    # Add the Azure IoT CLI Extension
    - name: Add the Azure IoT CLI Extension
      run: az extension add --name azure-iot

    # Set the SUBSCRIPTION_ID (from GitHub Action secrets)
    - name: Set default subscription
      run: az account set --subscription ${{secrets.SUBSCRIPTION_ID}}

    # Create the Resource Group
    - name: Create Resource Group
      shell: bash
      run: |
        az group create --name ${{ github.event.inputs.resource_group }} --location ${{ github.event.inputs.azure_region }}

    # Create the environment variables
    - name: Create environment variables
      shell: bash
      run: |
        echo "IOT_HUB_NAME=aruba-iot-hub-${{ env.SUFFIX }}" >> $GITHUB_ENV
        echo "DPS_NAME=aruba-dps-${{ env.SUFFIX }}" >> $GITHUB_ENV
        echo "NAMESPACE_NAME=pareto-anywhere-events-${{ env.SUFFIX }}" >> $GITHUB_ENV
        echo "EVENT_HUB_NAME=pareto-anywhere-event-hub-${{ env.SUFFIX }}" >> $GITHUB_ENV
        echo "WPS_NAME=pareto-anywhere-wps-${{ env.SUFFIX }}" >> $GITHUB_ENV
        echo "STORAGE_ACCOUNT_NAME=paretoanywherestorage${{ env.SUFFIX }}" >> $GITHUB_ENV
        echo "FUNCTION_APP_NAME=pareto-anywhere-${{ env.SUFFIX }}" >> $GITHUB_ENV
        echo "FUNCTION_APP_PLAN_NAME=pareto-anywhere-plan-${{ env.SUFFIX }}" >> $GITHUB_ENV

    # Create the IoT Hub for Aruba IoT Transport for Azure
    - name: Create IoT Hub for Aruba IoT Transport for Azure
      shell: bash
      run: |
        az iot hub create --name ${{ env.IOT_HUB_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --sku S1 --location ${{ github.event.inputs.azure_region }}
        iothubendpoint=$(az iot hub connection-string show -n ${{ env.IOT_HUB_NAME }} --default --output tsv)
        echo "IOT_HUB_ENDPOINT=$iothubendpoint" >> $GITHUB_ENV
        echo "Created IoT Hub ${{ env.IOT_HUB_NAME }} using Connection String: ${{ env.IOT_HUB_ENDPOINT }}"

    # Create the Device Provisioning Service for Aruba IoT Transport for Azure
    - name: Create Device Provisioning Service
      shell: bash
      run: |
        az iot dps create --name ${{ env.DPS_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --location ${{ github.event.inputs.azure_region }} --sku S1 --unit 1
        az iot dps linked-hub create --dps-name ${{ env.DPS_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --connection-string ${{ env.IOT_HUB_ENDPOINT }} --location ${{ github.event.inputs.azure_region }}
        echo "Created Device Provisioning Service ${{ env.DPS_NAME }}"

    # Create the Event Hub and Namespace
    - name: Create Event Hub
      shell: bash
      run: |
        az eventhubs namespace create --name ${{ env.NAMESPACE_NAME }} --resource-group ${{ github.event.inputs.resource_group }}  -l ${{ github.event.inputs.azure_region }}
        az eventhubs eventhub create  --name ${{ env.EVENT_HUB_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --namespace-name ${{ env.NAMESPACE_NAME }}
        az eventhubs eventhub authorization-rule create --authorization-rule-name pareto-anywhere-hub-rule --eventhub-name ${{ env.EVENT_HUB_NAME }} --namespace-name ${{ env.NAMESPACE_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --rights Listen Send
        sendappsetting=$(az eventhubs eventhub authorization-rule keys list --resource-group  ${{ github.event.inputs.resource_group }} --namespace-name ${{ env.NAMESPACE_NAME }} --eventhub-name ${{ env.EVENT_HUB_NAME }} --name pareto-anywhere-hub-rule | jq .primaryConnectionString)
        echo "SEND_APP_SETTING=$sendappsetting" >> $GITHUB_ENV
        echo "Created Event Hub ${{ env.EVENT_HUB_NAME }} using Namespace ${{ env.NAMESPACE_NAME }}"

    # Create the WebPubSub
    - name: Create WebPubSub
      shell: bash
      run: |
        az webpubsub create --name ${{ env.WPS_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --location ${{ github.event.inputs.azure_region }} --sku Free_F1
        wpsendpoint=$(az webpubsub key show --name ${{ env.WPS_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --query primaryConnectionString --output tsv)
        echo "WPS_ENDPOINT=$wpsendpoint" >> $GITHUB_ENV

    # Create the Storage Account
    - name: Create Storage Account
      shell: bash
      run: |
        az storage account create --name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --sku Standard_LRS --location ${{ github.event.inputs.azure_region }} 
        storageconnectionstring=$(az storage account show-connection-string --name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --output tsv)
        echo "STORAGE_CONNECTION_STRING=$storageconnectionstring" >> $GITHUB_ENV

    # Create Function App (and Pricing Plan)
    - name: Create Function App
      shell: bash
      run: |
        az functionapp plan create --name ${{ env.FUNCTION_APP_PLAN_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --location ${{ github.event.inputs.azure_region }} --sku Y1
        az functionapp create --name ${{ env.FUNCTION_APP_NAME }} --storage-account ${{ env.STORAGE_ACCOUNT_NAME }} --plan ${{ env.FUNCTION_APP_PLAN_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --runtime node --functions-version 4

    # Setup Node.js
    - name: Setup Node.js Environment
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Install packages with npm
    - name: 'Resolve Project Dependencies Using Npm'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm install
        popd

    # Run Pareto Anywhere for Azure
    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.FUNCTION_APP_NAME }}
        slot-name: ${{ env.SLOT }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

    # Create Function App Configuration
    - name: Set Function App Configuration
      shell: bash
      run: |
        az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --settings "AzureWebJobsStorage=${{ env.STORAGE_CONNECTION_STRING }}" 
        az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --settings "EventHubConnectionString=${{ env.IOT_HUB_ENDPOINT }}"
        az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --settings "EventHubSendAppSetting=${{ env.SEND_APP_SETTING }}" 
        az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --settings "WebPubSubConnectionString=${{ env.WPS_ENDPOINT }}"
        az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --settings "iot_hub_name=${{ env.IOT_HUB_NAME }}"
        az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --settings "event_hub_name=${{ env.EVENT_HUB_NAME }}"
        az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --settings "web_pub_sub_hub_name=${{ env.WPS_NAME }}"
        az functionapp restart --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ github.event.inputs.resource_group }}

    # Print connection variables for Aruba IoT Transport for Azure
    - name: 'Print Aruba IoT Transport for Azure Connection Variables'
      shell: bash
      run: |
        echo "Connection Variables: $(az iot dps policy show --dps-name ${{ env.DPS_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --policy-name provisioningserviceowner)"
        echo "DPS ID Scope: $(az iot dps show --name ${{ env.DPS_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --query properties.idScope -o tsv)"
        echo "DPS Primary Key: $(az iot dps policy show --dps-name ${{ env.DPS_NAME }} --resource-group ${{ github.event.inputs.resource_group }} --policy-name provisioningserviceowner --query primaryKey )"
